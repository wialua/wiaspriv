local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = 'Auto Farm Menu',
    Center = true,
    AutoShow = true,
})

local Tabs = {
    AutoFarm = Window:AddTab('Auto Farm'),
}

local AutoFarmTab = Tabs.AutoFarm
local LeftGroup = AutoFarmTab:AddLeftGroupbox('Left Dropdowns')
local RightGroup = AutoFarmTab:AddRightGroupbox('Right Dropdowns')

local cardboardKingdomEnemies = {
    "Nooblin", "Magical Noob", "Noobian Soldier", "King Noob"
}
local candylandEnemies = {
    "Gingernoob", "Chocolate Warrior", "Gumpdrop Guardian", "Candy God"
}
local toyTownEnemies = {
    "Toy Noobstar", "Plastic Pillager", "Toy Brute", "Bounty Buggy"
}
local sandyDunesEnemies = {
    "Desert Archer", "Fossil Dweller", "Desert Lord", "Pharaoh Noobia"
}
local moltenRealmEnemies = {
    "Lavaborn", "Molten Spearsman", "Heavy Lavaman", "Lava King"
}
local articVillageEnemies = {
    "Snowman", "Artic Mage", "Artic Soldier", "Artic Overlord"
}
local steampunkSocietyEnemies = {
    "Gearling", "Steam Soldier", "Cog Colonel", "Steambot"
}
local cybervilleEnemies = {
    "Noobot", "Rocketeer", "Noobroyer", "Robo Overlord"
}
local alchemistSwampEnemies = {
    "Gladiator Shroom", "Warrior Shroom", "Alchemist Shroom", "Decomposer"
}
local doomSpireEnemies = {
    "Shrine Hunter", "Doom Hunter", "Abomination"
}
local northPoleEnemies = {
    "Boss Statue1", "Catastrophic Noob", "Boss Statue2", "Boss Statue3", "Boss Statue4", "Boss Statue5"
}
local sakuraIslesEnemies = {
    "Ice Breaker", "Frost Guard", "Frost Knight", "Kaos Kringle", "Kringle", "Shinobi Noob", "Kage Shadow", "Dragon Sensei"
}

local leftDropdowns = {
    {Name = "Cardboard Kingdom", Values = cardboardKingdomEnemies},
    {Name = "Candyland", Values = candylandEnemies},
    {Name = "Toy Town", Values = toyTownEnemies},
    {Name = "Sandy Dunes", Values = sandyDunesEnemies},
    {Name = "Molten Realm", Values = moltenRealmEnemies},
    {Name = "Artic Village", Values = articVillageEnemies},
}

local rightDropdowns = {
    {Name = "Steampunk Society", Values = steampunkSocietyEnemies},
    {Name = "Cyberville", Values = cybervilleEnemies},
    {Name = "Alchemist Swamp", Values = alchemistSwampEnemies},
    {Name = "DoomSpire", Values = doomSpireEnemies},
    {Name = "North Pole", Values = northPoleEnemies},
    {Name = "Sakura Isles", Values = sakuraIslesEnemies},
}

for i, dropdown in ipairs(leftDropdowns) do
    LeftGroup:AddDropdown('LeftDropdown' .. i, {
        Values = dropdown.Values,
        Default = 1,
        Multi = false,
        Text = dropdown.Name,
        Tooltip = 'Select an option',
    })
    LeftGroup:AddToggle('LeftToggle' .. i, {
        Text = 'Enable ' .. dropdown.Name,
        Default = false,
        Tooltip = 'Toggle for ' .. dropdown.Name,
    })
end

for i, dropdown in ipairs(rightDropdowns) do
    RightGroup:AddDropdown('RightDropdown' .. i, {
        Values = dropdown.Values,
        Default = 1,
        Multi = false,
        Text = dropdown.Name,
        Tooltip = 'Select an option',
    })
    RightGroup:AddToggle('RightToggle' .. i, {
        Text = 'Enable ' .. dropdown.Name,
        Default = false,
        Tooltip = 'Toggle for ' .. dropdown.Name,
    })
end

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local lp = Players.LocalPlayer
local char = lp.Character or lp.CharacterAdded:Wait()
local enemiesFolder = Workspace:WaitForChild("GameObjects"):WaitForChild("ActiveEnemies")

local toggle = false
local currentTarget = nil
local targetColorToSwitch = Color3.new(1, 1, 1)

local function getTargets(name)
    local list = {}
    for _, v in ipairs(enemiesFolder:GetChildren()) do
        if v.Name == name and v:FindFirstChild("HumanoidRootPart") then
            table.insert(list, v)
        end
    end
    return list
end

local function isTargetColorChanged(target)
    if not target or not target:FindFirstChild("HumanoidRootPart") then return false end
    return target.HumanoidRootPart.Color == targetColorToSwitch
end

local function moveTo(pos)
    local hrp = char and char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    pos = Vector3.new(pos.X, hrp.Position.Y, pos.Z)

    local bv = Instance.new("BodyVelocity")
    bv.MaxForce = Vector3.new(1e6, 0, 1e6)
    bv.Velocity = Vector3.zero
    bv.Parent = hrp

    local reached = false

    local conn
    conn = RunService.Heartbeat:Connect(function()
        if not toggle then
            bv.Velocity = Vector3.zero
            reached = true
            conn:Disconnect()
            bv:Destroy()
            return
        end
        local horizontalPos = Vector3.new(hrp.Position.X, 0, hrp.Position.Z)
        local targetHorizontalPos = Vector3.new(pos.X, 0, pos.Z)
        local dist = (targetHorizontalPos - horizontalPos).Magnitude
        if dist < 3 then
            bv.Velocity = Vector3.zero
            reached = true
            conn:Disconnect()
            bv:Destroy()
        else
            local dir = (targetHorizontalPos - horizontalPos).Unit
            bv.Velocity = dir * math.clamp(dist * 6, 100, 350)
        end
    end)

    repeat task.wait() until reached
end

local function updateCurrentTarget()
    currentTarget = nil
    for i = 1, 6 do
        if Toggles['LeftToggle' .. i].Value then
            local enemyName = Options['LeftDropdown' .. i].Value
            local targets = getTargets(enemyName)
            for _, target in ipairs(targets) do
                if not isTargetColorChanged(target) then
                    currentTarget = target
                    toggle = true
                    return
                end
            end
        end
        if Toggles['RightToggle' .. i].Value then
            local enemyName = Options['RightDropdown' .. i].Value
            local targets = getTargets(enemyName)
            for _, target in ipairs(targets) do
                if not isTargetColorChanged(target) then
                    currentTarget = target
                    toggle = true
                    return
                end
            end
        end
    end
    toggle = false
end

task.spawn(function()
    while true do
        if toggle and char and char:FindFirstChild("HumanoidRootPart") then
            if not currentTarget or not currentTarget.Parent or isTargetColorChanged(currentTarget) then
                updateCurrentTarget()
            end
            if currentTarget and currentTarget:FindFirstChild("HumanoidRootPart") then
                local pos = currentTarget.HumanoidRootPart.Position + Vector3.new(0, 5, 0)
                moveTo(pos)
            end
        else
            currentTarget = nil
            toggle = false
            task.wait(0.5)
        end
        task.wait(0.2)
    end
end)

lp.CharacterAdded:Connect(function(c)
    char = c
end)

for i = 1, 6 do
    Options['LeftDropdown' .. i]:OnChanged(function()
        toggle = false
        currentTarget = nil
    end)
    Toggles['LeftToggle' .. i]:OnChanged(function()
        toggle = Toggles['LeftToggle' .. i].Value
        if toggle then
            currentTarget = nil
        end
    end)
    Options['RightDropdown' .. i]:OnChanged(function()
        toggle = false
        currentTarget = nil
    end)
    Toggles['RightToggle' .. i]:OnChanged(function()
        toggle = Toggles['RightToggle' .. i].Value
        if toggle then
            currentTarget = nil
        end
    end)
end

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
ThemeManager:SetFolder('AutoFarmHub')
SaveManager:SetFolder('AutoFarmHub/configs')
SaveManager:BuildConfigSection(Tabs['Auto Farm'])
ThemeManager:ApplyToTab(Tabs['Auto Farm'])

Library:SetWatermarkVisibility(true)
Library:SetWatermark('Auto Farm Menu')

Library:OnUnload(function()
    print('Auto Farm Menu unloaded!')
    Library.Unloaded = true
end)
