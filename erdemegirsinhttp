-- =====================================
-- LinoriaLib Full Example (Detailed, Modular, Commented)
-- Written by Wally | Fully Explained Version
-- =====================================

-- ==============================
-- 1. LOAD LIBRARY & ADDONS
-- ==============================
local repo = 'https://raw.githubusercontent.com/mstudio45/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

-- Shortcut tables for easier access
local Options = Library.Options
local Toggles = Library.Toggles

-- ==============================
-- 2. GLOBAL SETTINGS
-- ==============================
Library.ShowToggleFrameInKeybinds = true   -- Show toggles in Keybind menu (mobile-friendly)
Library.ShowCustomCursor = true           -- Use Linoria custom cursor globally
Library.NotifySide = "Left"               -- Notifications appear on Left/Right

-- ==============================
-- 3. CREATE WINDOW
-- ==============================
local Window = Library:CreateWindow({
    Title = 'MemeAvcƒ±sƒ±',
    Center = true,
    AutoShow = true,
    Resizable = true,
    ShowCustomCursor = false,
    UnlockMouseWhileOpen = true,
    NotifySide = "Left",
    TabPadding = 8,
    MenuFadeTime = 0.2
})

local Tabs = {
    Main = Window:AddTab('Main'),
    UISettings = Window:AddTab('UI Settings')
}

-- ==============================
-- ‚ö° Auto Touch (Stable Version)
-- ==============================

-- TouchInterest listesi
local touchParts = {
    ["1.B√∂lge"] = {
        game:GetService("Workspace").Buttons_1.x1.Touch2.TouchInterest,
        game:GetService("Workspace").Buttons_4.x10.Touch2.TouchInterest,
        game:GetService("Workspace").Buttons_1.x25.Touch2.TouchInterest
    },
    ["2.B√∂lge"] = {
        game:GetService("Workspace").Buttons_2.x1.Touch2.TouchInterest,
        game:GetService("Workspace").Buttons_2.x10.Touch2.TouchInterest,
        game:GetService("Workspace").Buttons_2.x25.Touch2.TouchInterest
    },
    ["3.B√∂lge"] = {
        game:GetService("Workspace").Buttons_3.x1.Touch2.TouchInterest,
        game:GetService("Workspace").Buttons_3.x10.Touch2.TouchInterest,
        game:GetService("Workspace").Buttons_3.x25.Touch2.TouchInterest
    },
    ["4.B√∂lge"] = {
        game:GetService("Workspace").Buttons_4.x1.Touch2.TouchInterest,
        game:GetService("Workspace").Buttons_4.x10.Touch2.TouchInterest,
        game:GetService("Workspace").Buttons_4.x25.Touch2.TouchInterest
    },
    ["Normal Luck"] = {
        game:GetService("Workspace").Buttons_99.x1.Touch2.TouchInterest
    },
    ["5x Luck"] = {
        game:GetService("Workspace").Buttons_99.x10.Touch2.TouchInterest
    },
    ["10x Luck"] = {
        game:GetService("Workspace").Buttons_99.x25.Touch2.TouchInterest
    }
}

-- ==============================
-- UI Grubu
-- ==============================
local TouchTab = Tabs.Main:AddLeftGroupbox('Auto Touch')

TouchTab:AddDropdown('TouchZones', {
    Values = {"1.B√∂lge","2.B√∂lge","3.B√∂lge","4.B√∂lge","Normal Luck","5x Luck","10x Luck"},
    Multi = true,
    Text = "Se√ß Dokunulacak B√∂lgeler",
    Default = {},
    Tooltip = "Se√ßilen b√∂lgelere otomatik dokunur."
})

TouchTab:AddToggle('AutoTouch', {
    Text = '‚ö° Auto Touch',
    Default = false,
    Tooltip = 'Se√ßili b√∂lgelerdeki butonlara otomatik dokunur.'
})

-- ==============================
-- √áekirdek Sistem
-- ==============================
local autoTouchRunning = false

local function doTouch(hrp, part)
    if not hrp or not part then return end
    pcall(function()
        firetouchinterest(hrp, part, 0)
        firetouchinterest(hrp, part, 1)
    end)
end

local function startAutoTouch()
    if autoTouchRunning then return end
    autoTouchRunning = true
    Library:Notify("‚ö° Auto Touch Ba≈üladƒ±", 2)

    task.spawn(function()
        while autoTouchRunning do
            local hrp = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                local selected = Options.TouchZones.Value
                for _, zoneName in ipairs(selected) do
                    local zoneList = touchParts[zoneName]
                    if zoneList then
                        for _, touch in ipairs(zoneList) do
                            if not autoTouchRunning then break end
                            if touch and touch.Parent then
                                doTouch(hrp, touch.Parent)
                                task.wait(0.1) -- her dokunu≈ü arasƒ± minik gecikme (ping koruma)
                            end
                        end
                    end
                end
            end
            task.wait(0.3) -- ana loop bekleme
        end
    end)
end

local function stopAutoTouch()
    autoTouchRunning = false
    Library:Notify("‚èπÔ∏è Auto Touch Durduruldu", 2)
end

-- ==============================
-- Toggle Kontrol√º
-- ==============================
Toggles.AutoTouch:OnChanged(function()
    if Toggles.AutoTouch.Value then
        startAutoTouch()
    else
        stopAutoTouch()
    end
end)

-- ==============================
-- Ghost Farm Tab (Yeni Grup)
-- ==============================
local GhostGroup = Tabs.Main:AddRightGroupbox('Ghost Farm')

GhostGroup:AddDropdown('GhostType', {
    Values = {"Common Ghost", "Uncommon Ghost", "Rare Ghost", "Epic Ghost", "Legendary Ghost"},
    Multi = false,
    Text = "Select Ghost Type",
    Default = "Common Ghost",
})

GhostGroup:AddToggle('AutoGhostFarm', {
    Text = "Enable Ghost Farm",
    Default = false,
    Tooltip = "Automatically farms selected ghosts",
    Callback = function(v)
        if v then
            startGhostFarm()
        else
            stopGhostFarm()
        end
    end
})

-- ==============================
-- Ghost Farm Functions
-- ==============================
local ghostRunning = false
local ghostLoop

-- K√º√ß√ºk-b√ºy√ºk harf, birle≈üik yazƒ±m fark etmeden arama yapan fonksiyon:
local function matchGhostName(objName, selectedType)
    local cleanName = string.lower(objName)
    local cleanType = string.lower(selectedType:gsub("%s+", "")) -- bo≈üluklarƒ± sil
    return string.find(cleanName, cleanType) ~= nil
end

function findClosestGhost(selectedType)
    local workspaceChildren = game:GetService("Workspace"):GetChildren()
    local hrp = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end

    local closest, dist = nil, math.huge
    for _, obj in ipairs(workspaceChildren) do
        -- Cube.001 i√ßeren objeleri tara
        local cube = obj:FindFirstChild("Cube.001")
        if cube and cube:FindFirstChild("ProximityPrompt") and matchGhostName(obj.Name, selectedType) then
            local mag = (cube.Position - hrp.Position).Magnitude
            if mag < dist then
                closest = cube
                dist = mag
            end
        end
    end
    return closest
end

function startGhostFarm()
    if ghostRunning then return end
    ghostRunning = true

    ghostLoop = task.spawn(function()
        while ghostRunning do
            local selected = Options.GhostType.Value
            local cube = findClosestGhost(selected)
            if cube and cube:FindFirstChild("ProximityPrompt") then
                local prompt = cube.ProximityPrompt
                prompt.HoldDuration = 0
                local hrp = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if hrp then
                    -- Karakteri yakla≈ütƒ±r
                    hrp.CFrame = CFrame.new(cube.Position + Vector3.new(0, 3, 0))
                    task.wait(0.15)
                    fireproximityprompt(prompt)
                end
            end
            task.wait(0.25) -- √ßok hƒ±zlƒ± olmasƒ±n, ping rahat
        end
    end)
end

function stopGhostFarm()
    ghostRunning = false
end

-- =======================================
-- üê£ Advanced Hatch System (Linoria Entegre)
-- =======================================

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HatchRemote = ReplicatedStorage:WaitForChild("Functions"):WaitForChild("Hatch")

-- ==============================
--  Yeni Sekme / Grup
-- ==============================
local HatchGroup = Tabs.Main:AddRightGroupbox('Advanced Hatch')

-- Textbox: Pet Name
HatchGroup:AddInput('PetName', {
    Default = '',
    Text = 'Pet Adƒ±',
    Placeholder = '√∂rn: Pumpkin',
    Tooltip = 'Pet adƒ±nƒ± yaz (case sensitive olabilir)',
})

-- Dropdown: Mode
HatchGroup:AddDropdown('HatchMode', {
    Values = {'Single', 'Triple', 'Octuple'},
    Default = 1,
    Text = 'Hatch Modu',
    Tooltip = 'Hatch modunu se√ß',
})

-- Loop Toggle
HatchGroup:AddToggle('LoopHatch', {
    Text = 'Loop Hatch',
    Default = false,
    Tooltip = 'Se√ßili pet ve mod ile s√ºrekli hatch yapar'
})

-- Hatch Button
HatchGroup:AddButton({
    Text = 'üê£ Hatch Now',
    Func = function()
        local pet = Options.PetName.Value
        local mode = Options.HatchMode.Value

        if pet == '' or not mode then
            Library:Notify('‚ö†Ô∏è Pet adƒ± veya mod bo≈ü olamaz!', 3)
            return
        end

        local success, err = pcall(function()
            -- Tek seferlik 3 hƒ±zlƒ± tetikleme
            for i = 1, 3 do
                HatchRemote:InvokeServer(pet, mode)
                task.wait(0.05)
            end
        end)

        if success then
            Library:Notify(('‚úÖ Hatch ba≈üarƒ±lƒ±: %s [%s]'):format(pet, mode), 3)
        else
            Library:Notify(('‚ùå Hatch hatasƒ±: %s'):format(err), 4)
        end
    end
})

-- ==============================
-- Loop Sistemi
-- ==============================
local looping = false
local loopThread

Toggles.LoopHatch:OnChanged(function()
    looping = Toggles.LoopHatch.Value

    if looping then
        Library:Notify('üîÅ Loop Hatch ba≈ülatƒ±ldƒ±', 3)

        loopThread = task.spawn(function()
            while looping do
                local pet = Options.PetName.Value
                local mode = Options.HatchMode.Value

                if pet ~= '' and mode then
                    local ok, err = pcall(function()
                        HatchRemote:InvokeServer(pet, mode)
                    end)

                    if not ok then
                        warn('Hatch hatasƒ±:', err)
                    end
                else
                    Library:Notify('‚ö†Ô∏è Pet veya mod bo≈ü!', 2)
                end

                -- √áok hƒ±zlƒ± olmasƒ±n, ping korumalƒ± stabil hƒ±z
                task.wait(0.25)
            end
        end)
    else
        Library:Notify('‚èπÔ∏è Loop Hatch durduruldu', 3)
        looping = false
    end
end)

-- ==============================
-- üè† Auto Ev (Linoria Group)
-- ==============================
local touchEvParts = {
    game:GetService("Workspace").Houses.House1.Pad.Pad.TouchInterest,
    game:GetService("Workspace").Houses.House2:GetChildren()[2].Pad.TouchInterest,
    game:GetService("Workspace").Houses.House3.Model.Pad.TouchInterest,
    game:GetService("Workspace").Houses.House4:GetChildren()[2].Pad.TouchInterest,
    game:GetService("Workspace").Houses.House5:GetChildren()[2].Pad.TouchInterest,
    game:GetService("Workspace").Houses.House6.Model.Pad.TouchInterest
}

local AutoEvGroup = Tabs.Main:AddRightGroupbox('Auto Ev')

AutoEvGroup:AddToggle('AutoEv', {
    Text = 'üè† Auto Ev',
    Default = false,
    Tooltip = 'Ev padlerine otomatik dokunur (stabil, lag yapmaz)'
})

-- ==============================
--  Core Fonksiyonlar
-- ==============================
local autoEvRunning = false
local autoEvLoop

Toggles.AutoEv:OnChanged(function()
    if Toggles.AutoEv.Value then
        if autoEvRunning then return end
        autoEvRunning = true
        Library:Notify('üè† Auto Ev ba≈ülatƒ±ldƒ±!', 3)

        autoEvLoop = task.spawn(function()
            while autoEvRunning do
                local player = game.Players.LocalPlayer
                local char = player.Character
                local hrp = char and char:FindFirstChild('HumanoidRootPart')

                if hrp then
                    for _, touch in ipairs(touchEvParts) do
                        if not autoEvRunning then break end
                        if touch and touch.Parent then
                            pcall(function()
                                -- TouchInterest objesi i√ßinde olduƒüu Part‚Äôe dokun
                                firetouchinterest(hrp, touch.Parent, 0)
                                firetouchinterest(hrp, touch.Parent, 1)
                            end)
                            task.wait(0.15) -- her pad arasƒ± minik gecikme (lag koruma)
                        end
                    end
                end
                task.wait(0.3) -- ana loop bekleme, ping stabil
            end
        end)
    else
        autoEvRunning = false
        Library:Notify('‚èπÔ∏è Auto Ev durduruldu.', 3)
    end
end)
