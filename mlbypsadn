task.spawn(function()
	local raw_mt = getrawmetatable
	local raw_hook = hookfunction
	local raw_newcc = newcclosure
	local raw_setro = setreadonly

	local function checkAndLog(_, fn)
		return typeof(fn) == "function"
	end

	_G.__antikick_backup = {
		getrawmetatable = raw_mt,
		hookfunction = raw_hook,
		newcclosure = raw_newcc,
		setreadonly = raw_setro,
		status = {
			getrawmetatable = checkAndLog("getrawmetatable", raw_mt),
			hookfunction = checkAndLog("hookfunction", raw_hook),
			newcclosure = checkAndLog("newcclosure", raw_newcc),
			setreadonly = checkAndLog("setreadonly", raw_setro),
		}
	}

	task.delay(7, function()
		local Players = game:GetService("Players")
		local ReplicatedStorage = game:GetService("ReplicatedStorage")
		local LocalPlayer = Players.LocalPlayer
		local StarterGui = game:GetService("StarterGui")

		local blockedKeywords = {
			"kick", "kicked", "kickplayer", "forcekick", "softkick", "smartkick", "kickme",
			"ban", "banned", "tempban", "permaban", "autoban", "ipban", "hwidban", "blacklist", "banish", "securityban", "acban",
			"disconnect", "disconnected", "forceleave", "leaveserver", "remoteshutdown", "boot", "eject", "remove", "drop", "removeplayer", "leave", "exitplayer",
			"cheatdetect", "anticheat", "exploitcheck", "hacks", "exploit", "exploitlog", "exploittrace", "cheater", "detected",
			"scriptdetected", "inject", "injection", "hookdetected", "illegalcall", "autoexec", "executor", "execution", "customloader",
			"kickgui", "popupkick", "kickmessage", "kickwarning", "kickalert", "kickedui", "kickpopup", "leavenotice",
			"ugcleave", "ugckick", "ugceject", "adminkick", "gamelogout", "securityban", "leaveremote", "violation", "trapcall", "eventkick", "accessrevoked", "securityevent",
			"c8r", "k4", "m7kick", "v1eject", "eventexit", "bmode", "abkick", "nocode", "exitcode", "userlog", "logtrace", "spyexit", "failauth"
		}

		local function containsBlocked(value)
			if typeof(value) == "string" then
				for _, keyword in ipairs(blockedKeywords) do
					if value:lower():find(keyword) then
						return true
					end
				end
			elseif typeof(value) == "table" then
				for _, v in pairs(value) do
					if containsBlocked(v) then return true end
				end
			end
			return false
		end

		local mt = getrawmetatable(game)
		setreadonly(mt, false)
		local oldNamecall = mt.__namecall

		mt.__namecall = newcclosure(function(self, ...)
			local method = getnamecallmethod()
			local args = { ... }

			if (method == "FireServer" or method == "InvokeServer") and typeof(self) == "Instance" then
				if containsBlocked(self.Name) or containsBlocked(args) then
					return nil
				end
			end

			if method == "Kick" and tostring(self) == tostring(LocalPlayer) then
				return nil
			end

			return oldNamecall(self, unpack(args))
		end)

		pcall(function()
			hookfunction(LocalPlayer.Kick, function(...)
				return nil
			end)
		end)

		pcall(function()
			hookfunction(game.Kick, function(...)
				return nil
			end)
		end)

		LocalPlayer.PlayerGui.ChildAdded:Connect(function(gui)
			if gui:IsA("ScreenGui") and containsBlocked(gui.Name) then
				gui:Destroy()
			end
		end)

		StarterGui:SetCore("ResetButtonCallback", false)
	end)
end)
