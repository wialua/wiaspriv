-- Ultimate God-Tier Aimbot Script by Wally (Revolutionized by Grok)
-- The most advanced, stable, and optimized Lua aimbot ever created

local repo = 'https://raw.githubusercontent.com/mstudio45/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
local Options = Library.Options
local Toggles = Library.Toggles

-- Global settings
Library.ShowToggleFrameInKeybinds = true
Library.ShowCustomCursor = true
Library.NotifySide = "Left"

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Aimbot settings
local AimbotSettings = {
	Enabled = true, -- Auto-enabled for aggression
	WallCheck = false,
	TeamCheck = false,
	FOVCircleEnabled = true,
	FOVCircleMode = "Sabit", -- Simplified to Sabit or Fare Takip
	AimbotMode = "Always", -- Max aggression
	AimbotKey = Enum.UserInputType.MouseButton2,
	HitPart = "Smart", -- God-tier part selection
	MaxDistance = 3000, -- Extended range
	TargetOnlySelected = false,
	CameraMode = "Smooth", -- Jitter-free aiming
	Smoothness = 0.01, -- Ultra-fast, near-instant lock
	FOVRadius = 100, -- Tight, precise FOV
	AutoTargetSwitch = true, -- Instant target switching
	InstantTargetSwitch = true, -- Snap to better targets
	PriorityMode = "Smart", -- Hyper-intelligent targeting
	HealthThreshold = 20, -- Low-health priority
}

local SelectedTargets = {}
local CurrentTarget = nil
local IsAiming = true -- Default for Always mode
local LastTargetUpdate = 0
local TargetUpdateInterval = 0.005 -- 200 FPS updates for insane speed
local RaycastCache = {}
local LastRaycastUpdate = 0
local RaycastUpdateInterval = 0.02 -- 50ms cache refresh
local Connections = {}

-- Drawing objects
local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = AimbotSettings.FOVCircleEnabled
FOVCircle.Thickness = 1
FOVCircle.Color = Color3.fromRGB(255, 0, 0)
FOVCircle.Radius = AimbotSettings.FOVRadius
FOVCircle.NumSides = 16 -- Hyper-optimized for FPS
FOVCircle.Filled = false

-- Hit parts
local HitParts = {"Head", "HumanoidRootPart", "UpperTorso", "LowerTorso"}

-- Window setup
local GameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
local Window = Library:CreateWindow({
	Title = 'ðŸ”¥ ' .. GameName .. ' God-Tier Aimbot ðŸ”¥',
	Center = true,
	AutoShow = true,
	Resizable = true,
	ShowCustomCursor = true,
	UnlockMouseWhileOpen = true,
	NotifySide = "Left",
	TabPadding = 8,
	MenuFadeTime = 0.15 -- Faster UI
})

local Tabs = {
	Aimbot = Window:AddTab('Aimbot'),
	['UI AyarlarÄ±'] = Window:AddTab('UI AyarlarÄ±'),
}

local AimbotGroup = Tabs.Aimbot:AddLeftGroupbox('Aimbot AyarlarÄ±')

-- Utility functions
local function GetPlayersList()
	local playerList = {}
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer then
			playerList[#playerList + 1] = player.Name
		end
	end
	return playerList
end

local function UpdatePlayerList()
	local newValues = GetPlayersList()
	Options.TargetPlayers.Values = newValues
	local updatedSelected = {}
	for target in pairs(SelectedTargets) do
		if table.find(newValues, target) then
			updatedSelected[target] = true
		end
	end
	SelectedTargets = updatedSelected
	Options.TargetPlayers:SetValue(SelectedTargets)
end

-- Aimbot UI elements
AimbotGroup:AddDropdown('TargetPlayers', {
	Values = GetPlayersList(),
	Default = nil,
	Multi = true,
	AllowNull = true,
	Text = 'Hedef Oyuncular',
	Tooltip = 'Hedef oyuncularÄ± seÃ§in, otomatik gÃ¼ncellenir',
	Callback = function(Value)
		SelectedTargets = Value
	end
})

AimbotGroup:AddToggle('AimbotEnable', {
	Text = 'Aimbot Etkin',
	Default = true,
	Tooltip = 'Aimbotu aÃ§ar/kapatÄ±r',
	Callback = function(Value)
		AimbotSettings.Enabled = Value
		if not Value then
			IsAiming = false
			CurrentTarget = nil
			RaycastCache = {}
			FOVCircle.Visible = false
		else
			FOVCircle.Visible = AimbotSettings.FOVCircleEnabled
			IsAiming = AimbotSettings.AimbotMode == "Always"
			CurrentTarget = GetClosestTarget()
		end
	end
})

AimbotGroup:AddToggle('WallCheck', {
	Text = 'Duvar KontrolÃ¼',
	Tooltip = 'Duvar arkasÄ±ndaki hedefleri engeller',
	Callback = function(Value)
		AimbotSettings.WallCheck = Value
		RaycastCache = {}
	end
})

AimbotGroup:AddToggle('TeamCheck', {
	Text = 'TakÄ±m KontrolÃ¼',
	Tooltip = 'AynÄ± takÄ±mdakilere kitlenmeyi engeller',
	Callback = function(Value)
		AimbotSettings.TeamCheck = Value
	end
})

AimbotGroup:AddToggle('TargetOnly', {
	Text = 'Sadece SeÃ§ili Hedefler',
	Tooltip = 'YalnÄ±zca seÃ§ilen oyunculara kilitlenir',
	Callback = function(Value)
		AimbotSettings.TargetOnlySelected = Value
	end
})

AimbotGroup:AddToggle('FOVCircle', {
	Text = 'FOV Ã‡emberi',
	Default = true,
	Tooltip = 'Hedefleme Ã§emberini gÃ¶sterir',
	Callback = function(Value)
		AimbotSettings.FOVCircleEnabled = Value
		FOVCircle.Visible = Value and AimbotSettings.Enabled
	end
})

AimbotGroup:AddToggle('AutoTargetSwitch', {
	Text = 'Otomatik Hedef DeÄŸiÅŸtirme',
	Default = true,
	Tooltip = 'GeÃ§ersiz hedefte yeni hedef seÃ§er',
	Callback = function(Value)
		AimbotSettings.AutoTargetSwitch = Value
	end
})

AimbotGroup:AddToggle('InstantTargetSwitch', {
	Text = 'AnlÄ±k Hedef DeÄŸiÅŸtirme',
	Default = true,
	Tooltip = 'Yeni hedeflere anÄ±nda kilitlenir',
	Callback = function(Value)
		AimbotSettings.InstantTargetSwitch = Value
	end
})

AimbotGroup:AddSlider('FOVRadius', {
	Text = 'FOV YarÄ±Ã§apÄ±',
	Default = 100,
	Min = 10,
	Max = 300,
	Rounding = 0,
	Tooltip = 'FOV Ã§emberinin boyutunu ayarlar',
	Callback = function(Value)
		AimbotSettings.FOVRadius = Value
		FOVCircle.Radius = Value
	end
})

AimbotGroup:AddSlider('MaxDistance', {
	Text = 'Maksimum Mesafe',
	Default = 3000,
	Min = 10,
	Max = 15000,
	Rounding = 0,
	Tooltip = 'Aimbotun kilitleneceÄŸi maksimum mesafe',
	Callback = function(Value)
		AimbotSettings.MaxDistance = Value
	end
})

AimbotGroup:AddSlider('Smoothness', {
	Text = 'YumuÅŸatma',
	Default = 0.01,
	Min = 0,
	Max = 0.2,
	Rounding = 2,
	Tooltip = 'Hedefe geÃ§iÅŸ hÄ±zÄ± (0 = anÄ±nda)',
	Callback = function(Value)
		AimbotSettings.Smoothness = Value
	end
})

AimbotGroup:AddSlider('HealthThreshold', {
	Text = 'SaÄŸlÄ±k Ã–ncelik EÅŸiÄŸi',
	Default = 20,
	Min = 0,
	Max = 100,
	Rounding = 0,
	Tooltip = 'DÃ¼ÅŸÃ¼k saÄŸlÄ±kta hedef Ã¶nceliklendirme eÅŸiÄŸi',
	Callback = function(Value)
		AimbotSettings.HealthThreshold = Value
	end
})

AimbotGroup:AddDropdown('AimbotMode', {
	Values = { 'Hold', 'Toggle', 'Always' },
	Default = 3, -- Always for max aggression
	Multi = false,
	Text = 'Aimbot Modu',
	Tooltip = 'Hold: BasÄ±lÄ± tut, Toggle: AÃ§/Kapat, Always: SÃ¼rekli aktif',
	Callback = function(Value)
		AimbotSettings.AimbotMode = Value
		if AimbotSettings.AimbotMode ~= "Always" then
			IsAiming = false
			CurrentTarget = nil
		else
			IsAiming = true
			CurrentTarget = GetClosestTarget()
		end
	end
})

AimbotGroup:AddDropdown('HitPart', {
	Values = { 'Head', 'HumanoidRootPart', 'UpperTorso', 'LowerTorso', 'Smart' },
	Default = 5, -- Smart for god-tier selection
	Multi = false,
	Text = 'Hedef VÃ¼cut ParÃ§asÄ±',
	Tooltip = 'Smart: En uygun parÃ§ayÄ± ultra-akÄ±llÄ± seÃ§er',
	Callback = function(Value)
		AimbotSettings.HitPart = Value
		RaycastCache = {}
	end
})

AimbotGroup:AddDropdown('FOVMode', {
	Values = { 'Sabit', 'Fare Takip' },
	Default = 1, -- Sabit for simplicity and speed
	Multi = false,
	Text = 'FOV Ã‡ember Modu',
	Tooltip = 'Sabit: Ekran ortasÄ±, Fare Takip: Fareye gÃ¶re',
	Callback = function(Value)
		AimbotSettings.FOVCircleMode = Value
	end
})

AimbotGroup:AddDropdown('CameraMode', {
	Values = { 'Normal', 'Birinci ÅžahÄ±s', 'Smooth' },
	Default = 3, -- Smooth for jitter-free aiming
	Multi = false,
	Text = 'Kamera Modu',
	Tooltip = 'Normal: Standart, Birinci ÅžahÄ±s: FPS, Smooth: Ultra-hÄ±zlÄ± geÃ§iÅŸ',
	Callback = function(Value)
		AimbotSettings.CameraMode = Value
	end
})

AimbotGroup:AddDropdown('PriorityMode', {
	Values = { 'Closest', 'Low Health', 'Smart' },
	Default = 3, -- Smart for hyper-intelligent targeting
	Multi = false,
	Text = 'Hedef Ã–ncelik Modu',
	Tooltip = 'Closest: En yakÄ±n, Low Health: DÃ¼ÅŸÃ¼k saÄŸlÄ±k, Smart: Ultra-akÄ±llÄ± analiz',
	Callback = function(Value)
		AimbotSettings.PriorityMode = Value
	end
})

AimbotGroup:AddLabel('Aimbot TuÅŸu'):AddKeyPicker('AimbotKey', {
	Default = 'MouseButton2',
	Mode = 'Always',
	NoUI = false,
	Text = 'Aimbot Aktivasyon TuÅŸu',
	Tooltip = 'Aimbotun Ã§alÄ±ÅŸmasÄ± iÃ§in tuÅŸ',
	ChangedCallback = function(New)
		AimbotSettings.AimbotKey = New
	end
})

-- Hyper-intelligent functions
local function IsTeamIgnored(player)
	if not AimbotSettings.TeamCheck then return false end
	local localTeam = LocalPlayer.Team and LocalPlayer.Team.Name or ""
	local targetTeam = player.Team and player.Team.Name or ""
	local gameTeams = {
		Prisoners = { "Prisoners", "Criminals", "Villains" },
		Police = { "Police", "Heroes" }
	}
	for team, allies in pairs(gameTeams) do
		if localTeam == team then
			return table.find(allies, targetTeam) ~= nil
		end
	end
	return false
end

local function IsVisible(targetPart)
	if not AimbotSettings.WallCheck then return true end
	local cacheKey = tostring(targetPart) .. "-" .. tostring(tick() // RaycastUpdateInterval)
	if RaycastCache[cacheKey] ~= nil then return RaycastCache[cacheKey] end

	local origin = Camera.CFrame.Position
	local params = RaycastParams.new()
	params.FilterType = Enum.RaycastFilterType.Exclude
	params.FilterDescendantsInstances = {LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()}
	params.IgnoreWater = true

	local result = Workspace:Raycast(origin, (targetPart.Position - origin).Unit * AimbotSettings.MaxDistance, params)
	local visible = not result or result.Instance:IsDescendantOf(targetPart.Parent)
	RaycastCache[cacheKey] = visible
	return visible
end

local function GetBestHitPart(character)
	if AimbotSettings.HitPart ~= "Smart" then
		return character:FindFirstChild(AimbotSettings.HitPart) or character:FindFirstChild("Head") or character:FindFirstChild("HumanoidRootPart")
	end

	local center = AimbotSettings.FOVCircleMode == "Sabit" and Camera.ViewportSize / 2 or UserInputService:GetMouseLocation()
	local bestPart = nil
	local maxScore = -math.huge
	local humanoid = character:FindFirstChild("Humanoid")
	local healthFactor = humanoid and (1 - humanoid.Health / humanoid.MaxHealth) * 0.6 or 0
	for _, partName in ipairs(HitParts) do
		local part = character:FindFirstChild(partName)
		if part then
			local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
			if onScreen and IsVisible(part) then
				local screenDist = (Vector2.new(screenPos.X, screenPos.Y) - center).Magnitude
				local velocity = part.Velocity and part.Velocity.Magnitude or 0
				local score = -screenDist * (partName == "Head" and 1.5 or 1) * (1 + healthFactor + velocity / 50)
				if score > maxScore then
					maxScore = score
					bestPart = part
				end
			end
		end
	end
	return bestPart or character:FindFirstChild("Head") or character:FindFirstChild("HumanoidRootPart")
end

local function GetClosestTarget()
	if tick() - LastTargetUpdate < TargetUpdateInterval then return CurrentTarget end
	LastTargetUpdate = tick()

	local closest = nil
	local minScore = math.huge
	local center = AimbotSettings.FOVCircleMode == "Sabit" and Camera.ViewportSize / 2 or UserInputService:GetMouseLocation()
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
			if IsTeamIgnored(player) then continue end
			if AimbotSettings.TargetOnlySelected and not SelectedTargets[player.Name] then continue end
			local part = GetBestHitPart(player.Character)
			if part then
				local dist = (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and
					(LocalPlayer.Character.HumanoidRootPart.Position - part.Position).Magnitude) or math.huge
				if dist <= AimbotSettings.MaxDistance then
					local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
					if onScreen then
						local screenDist = (Vector2.new(screenPos.X, screenPos.Y) - center).Magnitude
						local score = screenDist
						if AimbotSettings.PriorityMode == "Low Health" then
							local health = player.Character.Humanoid.Health
							if health <= AimbotSettings.HealthThreshold then
								score = score * 0.25
							end
						elseif AimbotSettings.PriorityMode == "Smart" then
							local humanoid = player.Character.Humanoid
							local health = humanoid.Health
							local velocity = part.Velocity and part.Velocity.Magnitude or 0
							local distFactor = dist / AimbotSettings.MaxDistance
							local scoreFactors = {
								health = (100 - health) / 100 * 0.7, -- Low health boost
								velocity = velocity / 40 * 0.3, -- Fast target boost
								distance = distFactor * 0.2, -- Closer target boost
								visibility = IsVisible(part) and 0.1 or 0 -- Visibility bonus
							}
							score = screenDist / (1 + scoreFactors.health + scoreFactors.velocity + scoreFactors.distance + scoreFactors.visibility)
						end
						if (not AimbotSettings.FOVCircleEnabled or screenDist <= FOVCircle.Radius) and score < minScore then
							if not AimbotSettings.WallCheck or IsVisible(part) then
								minScore = score
								closest = part
							end
						end
					end
				end
			end
		end
	end
	return closest
end

local function UpdateFOVCircle()
	if not AimbotSettings.FOVCircleEnabled then return end
	FOVCircle.Position = AimbotSettings.FOVCircleMode == "Sabit" and Camera.ViewportSize / 2 or UserInputService:GetMouseLocation()
	FOVCircle.Radius = AimbotSettings.FOVRadius
end

local function LockCamera(target)
	if not target or not AimbotSettings.Enabled then return end
	local camPos = Camera.CFrame.Position
	local targetPos = target.Position

	if AimbotSettings.CameraMode == "Birinci ÅžahÄ±s" and LocalPlayer.CameraMode ~= Enum.CameraMode.LockFirstPerson then
		Library:Notify("Birinci ÅŸahÄ±s modunda deÄŸilsiniz!", 1.5)
		return
	end

	local currentCFrame = Camera.CFrame
	local targetCFrame = CFrame.new(camPos, targetPos)
	Camera.CFrame = AimbotSettings.CameraMode == "Smooth" and
		currentCFrame:Lerp(targetCFrame, 1 - AimbotSettings.Smoothness) or
		CFrame.new(camPos, targetCFrame.Position)
end

-- Main aimbot logic
Connections.Render = RunService.RenderStepped:Connect(function()
	if not AimbotSettings.Enabled then return end
	if AimbotSettings.AimbotMode == "Always" then IsAiming = true end

	if IsAiming then
		local newTarget = GetClosestTarget()
		if not CurrentTarget or not CurrentTarget.Parent or not CurrentTarget.Parent:FindFirstChild("Humanoid") or
			CurrentTarget.Parent.Humanoid.Health <= 0 then
			if AimbotSettings.AutoTargetSwitch then
				CurrentTarget = newTarget
			else
				CurrentTarget = nil
			end
		elseif AimbotSettings.InstantTargetSwitch and newTarget and newTarget ~= CurrentTarget then
			CurrentTarget = newTarget
		end
		if CurrentTarget then
			LockCamera(CurrentTarget)
		end
	end
	UpdateFOVCircle()
	if tick() - LastRaycastUpdate >= RaycastUpdateInterval then
		RaycastCache = {}
		LastRaycastUpdate = tick()
	end
end)

-- Input handling
local function HandleInput(input, gameProcessed)
	if gameProcessed then return end
	if input.UserInputType == AimbotSettings.AimbotKey or input.KeyCode == AimbotSettings.AimbotKey then
		if AimbotSettings.AimbotMode == "Hold" then
			if input.UserInputState == Enum.UserInputState.Begin then
				IsAiming = true
				CurrentTarget = GetClosestTarget()
			elseif input.UserInputState == Enum.UserInputState.End then
				IsAiming = false
				CurrentTarget = nil
			end
		elseif AimbotSettings.AimbotMode == "Toggle" then
			if input.UserInputState == Enum.UserInputState.Begin then
				IsAiming = not IsAiming
				if IsAiming then
					CurrentTarget = GetClosestTarget()
				else
					CurrentTarget = nil
				end
			end
		end
	end
end

Connections.InputBegan = UserInputService.InputBegan:Connect(HandleInput)
Connections.InputEnded = UserInputService.InputEnded:Connect(HandleInput)
Connections.PlayerAdded = Players.PlayerAdded:Connect(UpdatePlayerList)
Connections.PlayerRemoving = Players.PlayerRemoving:Connect(UpdatePlayerList)
Connections.TeamChanged = LocalPlayer:GetPropertyChangedSignal("Team"):Connect(function()
	if IsAiming then
		CurrentTarget = GetClosestTarget()
	end
end)

-- Unload handling
Library:OnUnload(function()
	for _, conn in pairs(Connections) do
		conn:Disconnect()
	end
	FOVCircle:Remove()
	RaycastCache = {}
	Library:Notify("Aimbot kaldÄ±rÄ±ldÄ±!", 1.5)
	Library.Unloaded = true
end)

-- UI Settings
local MenuGroup = Tabs['UI AyarlarÄ±']:AddLeftGroupbox('MenÃ¼')

MenuGroup:AddToggle("KeybindMenuOpen", {
	Default = Library.KeybindFrame.Visible,
	Text = "Keybind MenÃ¼sÃ¼nÃ¼ AÃ§",
	Tooltip = "Keybind menÃ¼sÃ¼nÃ¼ gÃ¶ster/gizle",
	Callback = function(value)
		Library.KeybindFrame.Visible = value
	end
})

MenuGroup:AddToggle("ShowCustomCursor", {
	Text = "Ã–zel Ä°mleÃ§",
	Default = true,
	Tooltip = "Ã–zel imleci aÃ§/kapat",
	Callback = function(Value)
		Library.ShowCustomCursor = Value
	end
})

MenuGroup:AddDivider()
MenuGroup:AddLabel("MenÃ¼ TuÅŸu"):AddKeyPicker("MenuKeybind", {
	Default = "RightShift",
	NoUI = true,
	Text = "MenÃ¼ tuÅŸu",
	Tooltip = "UIâ€™yi aÃ§Ä±p kapatmak iÃ§in tuÅŸ",
	Callback = function(Value)
		Library.ToggleKeybind = Value
	end
})

MenuGroup:AddButton("KaldÄ±r", function()
	Library:Unload()
end)

-- Theme and Save Manager
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')
SaveManager:BuildConfigSection(Tabs['UI AyarlarÄ±'])
ThemeManager:ApplyToTab(Tabs['UI AyarlarÄ±'])
SaveManager:LoadAutoloadConfig()

-- Initial player list update
UpdatePlayerList()
